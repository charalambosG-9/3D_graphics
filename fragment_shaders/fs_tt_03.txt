#version 330 core

in vec3 aPos;
in vec3 aNormal;
in vec2 aTexCoord;

out vec4 fragColor;
 
uniform vec3 viewPos;
uniform sampler2D first_texture;
uniform sampler2D second_texture;

struct PointLight {    
  vec3 position;
    
  float constant;
  float linear;
  float quadratic;  

  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
};  

struct SpotLight {
  vec3 ambient;
  vec3 diffuse;
  vec3 specular;

  vec3  position;
  vec3  direction;
  float cutOff;
  float outerCutOff;

};   

uniform PointLight pointLights[2];

uniform SpotLight spotLights[2];

struct Material {
  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
  float shininess;
}; 
  
uniform Material material;

vec3 CalcPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir) {
  vec3 lightDir = normalize(light.position - fragPos);
  vec3 halfwayDir = normalize(lightDir + viewDir);
  // diffuse shading
  float diff = max(dot(normal, lightDir), 0.0);
  // specular shading
  vec3 reflectDir = reflect(-lightDir, normal);
  float spec = pow(max(dot(normal, halfwayDir), 0.0), material.shininess);
  // attenuation
  float distance = length(light.position - fragPos);
  float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance));    
  // combine results
  vec3 ambient = light.ambient * vec3(texture(first_texture, aTexCoord));
  vec3 diffuse = light.diffuse * diff * vec3(texture(first_texture, aTexCoord)); 
  vec3 specular = light.specular * spec * vec3(texture(first_texture, aTexCoord));
  ambient  *= attenuation;
  diffuse  *= attenuation;
  specular *= attenuation;
  return (ambient + diffuse + specular);
} 

vec3 CalcSpotLight(SpotLight light, vec3 normal, vec3 fragPos, vec3 viewDir) {
  
  vec3 lightDir = normalize(light.position - fragPos);
  vec3 halfwayDir = normalize(lightDir + viewDir);
  vec3 result = vec3(0.0);
  float theta = dot(lightDir, normalize(-light.direction));
  float epsilon = light.cutOff - light.outerCutOff;
  float intensity = clamp((theta - light.outerCutOff) / epsilon, 0.0, 1.0);   
  
  if(theta > light.cutOff) {       
    float diff = max(dot(normal, lightDir), 0.0);
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(normal, halfwayDir), 0.0), material.shininess);
    vec3 ambient = light.ambient * vec3(texture(first_texture, aTexCoord));
    vec3 diffuse = light.diffuse * diff * vec3(texture(first_texture, aTexCoord)); 
    vec3 specular = light.specular * spec * vec3(texture(second_texture, aTexCoord));
    diffuse  *= intensity;
    specular *= intensity;
    result = (ambient + diffuse + specular);
  }else{  
    result = light.ambient * vec3(texture(first_texture, aTexCoord));
  }

  return result;
}

void main() {
  
  vec3 norm = normalize(aNormal);
  vec3 viewDir = normalize(viewPos - aPos);
  vec3 result = vec3(0.0);

  // Point lights
  for(int i = 0; i < 2; i++){
    result += CalcPointLight(pointLights[i], norm, aPos, viewDir); 
  }   
  // Spot lights
  for(int i = 0; i < 2; i++){
    result += CalcSpotLight(spotLights[i], norm, aPos, viewDir);
  }       
    
  fragColor = vec4((result), 1.0);
}